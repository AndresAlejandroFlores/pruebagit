Ejercicio: Club de Deportes

Crear una base de datos llamada Club en donde se encuentren dos tablas: socios y deportes.

Modelo

- De cada socio se solicita: num_socio, nombre, apellido y dni. Además de esto, cada socio puede realizar solo UN DEPORTE.
- De cada deporte se colicita: codigo, nombre, es_grupal. Como existen deportes grupales, puede suceder que más de una persona haga un mismo deporte.
- Realizar el modelado de la base de datos (con las correspondientes tablas y relaciones).
- Agregar al menos 10 registros en la tabla socios y 3 en la tabla deportes (se sugiere tenis, futbol y basquet).

Consultas SQL

- Obtener la lista completa de todos los socios.
- Obtener la lista completa de todos los deportes.
- Obtener la lista de socios que practiquen tenis.
- Obtener la cantidad de socios que practiquen futbol.

Desarrollo

socios 1 ____ 1 deportes
socios N ____ 1 deportes

SELECT * FROM socio
SELECT * FROM deportes
SELECT * FROM socio WHERE fk_codigo = 1
SELECT COUNT(fk_codigo) FROM socio WHERE fk_codigo = 3

Ejercicio: Tienda de Informática

Crear una base de datos llamada infotienda en donde se encuentren dos tablas: producto y fabricante.

Modelado

- De cada producto se solicita: codigo, nombre y precio. Además de esto, cada producto puede realizar solo UN FABRICANTE.
- De cada fabricantes se solicita: codigo, nombre, dirección. Puede suceder que distintos productos tengan al mismo fabricante.
- Realizar el modelado de la base de datos (con las correspondientes tablas y relaciones).
- Agregar al menos 10 registros en la tabla productos y 3 en la tabla fabricantes.

Consultas SQL

- Obtener la lista completa de todos los productos ordenados por precio (de más barato a más caro).
- Obtener la lista completa de todos los fabricantes ordenados por nombre (de forma ascendente).
- Obtener el nombre y precio de los productos que valgan más de $10.000.
- Obtener el nombre y precio del producto más barato.

Desarrollo

productos 1 ____ 1 fabricantes
productos N ____ 1 fabricantes

SELECT * FROM productos ORDER BY precio ASC
SELECT * FROM fabricantes ORDER BY nombre ASC
SELECT nombre, precio FROM productos WHERE precio > 10000
SELECT nombre, precio FROM productos ORDER BY precio ASC LIMIT 1
SELECT nombre, MIN(precio) FROM productos

SELECT nombre, precio FROM productos ORDER BY precio ASC LIMIT 1,3


Ejercicio: Veterinaria

Una veterinaria desea llevar un control de sus pacientes y sus tratamientos en las tablas "Pacientes" y "Tratamientos" con los siguientes datos:

Modelado

- Pacientes (id_paciente, nombre_paciente, fecha_nacimiento, especie)
- Tratamientos (id_tratamiento, id_paciente (fk), tipo_tratamiento, fecha_tratamiento)

- Realizar el modelado de la base de datos (con las correspondientes tablas y relaciones).
- Agregar registros a ambas tablas para poder realizar consultas.

Consultas SQL

- Obtener el nombre de cada paciente asociado a la lista historica de tratamientos que se le realizó, ordenado alfabeticamente por nombre del paciente.
- Obtener la cantidad total de tratamientos asignados a un mismo paciente entre dos fechas.
- El paciente con mayor cantidad de tratamientos realizados.

Desarrollo

INSERT INTO Pacientes (id_paciente, nombre_paciente, fecha_nacimiento, especie)
VALUES
  (1, 'Milo', '2019-05-02', 'Perro'),
  (2, 'Luna', '2020-02-14', 'Gato'),
  (3, 'Rocky', '2018-10-11', 'Perro'),
  (4, 'Kitty', '2021-01-23', 'Gato'),
  (5, 'Max', '2017-08-04', 'Perro'),
  (6, 'Simba', '2020-11-30', 'Gato'),
  (7, 'Toby', '2016-03-15', 'Perro'),
  (8, 'Coco', '2019-07-19', 'Gato'),
  (9, 'Lola', '2015-12-25', 'Perro'),
  (10,'Socks', '2021-02-28', 'Gato');

INSERT INTO Tratamientos (id_tratamiento, id_paciente, tipo_tratamiento, fecha_tratamiento)
VALUES 
  
  (1, 2, 'Vacunación', '2022-03-01'),
  (2, 2, 'Desparasitación', '2022-03-15'),
  (3, 2, 'Chequeo general', '2022-04-02'),
  (4, 1, 'Vacunación', '2022-03-01'),
  (5, 1, 'Desparasitación', '2022-03-15'),
  (6, 1, 'Chequeo general', '2022-04-02'),
  (7, 1, 'Tratamiento dental', '2022-05-10'),
  (8, 4, 'Vacunación', '2022-04-01'),
  (9, 4, 'Desparasitación', '2022-04-15'),
  (10, 4, 'Chequeo general', '2022-05-02'),
  (11, 4, 'Tratamiento de heridas', '2022-06-10'),
  (12, 7, 'Vacunación', '2022-04-05'),
  (13, 7, 'Desparasitación', '2022-04-20'),
  (14, 7, 'Chequeo general', '2022-05-03'),
  (15, 7, 'Tratamiento para alergias', '2022-06-12'),
  (16, 9, 'Vacunación', '2022-05-01'),
  (17, 9, 'Desparasitación', '2022-05-15'),
  (18, 9, 'Chequeo general', '2022-06-02'),
  (19, 9, 'Tratamiento para infección de oídos', '2022-07-10'),
  (20, 10, 'Vacunación', '2022-05-05'),
  (21, 10, 'Desparasitación', '2022-05-20'),
  (22, 10, 'Chequeo general', '2022-06-03'),
  (23, 10, 'Tratamiento para problemas de piel', '2022-07-15'),
  (24, 3, 'Vacunación', '2022-03-10'),
  (25, 3, 'Desparasitación', '2022-03-25'),
  (26, 3, 'Chequeo general', '2022-04-12'),
  (27, 3, 'Tratamiento para pulgas y garrapatas', '2022-05-20'),
  (28, 4, 'Limpieza dental', '2022-01-01'),
  (29, 4, 'Desparasitación', '2022-02-03'),
  (30, 4, 'Vacunación', '2022-03-05'),
  (31, 4, 'Extracción de dientes', '2022-04-07'),
  (32, 4, 'Tratamiento de la piel', '2022-05-09'),
  (33, 4, 'Radiografía', '2022-06-11'),
  (34, 4, 'Cirugía', '2022-07-13');

1.-
SELECT p.nombre_paciente FROM pacientes p, tratamientos t WHERE p.id_paciente = t.id_paciente ORDER BY p.nombre_paciente

SELECT p.nombre_paciente, t.tipo_tratamiento, t.fecha_tratamiento FROM pacientes p, tratamientos t WHERE p.id_paciente = t.id_paciente ORDER BY p.nombre_paciente

SELECT p.nombre_paciente, t.tipo_tratamiento, t.fecha_tratamiento FROM pacientes p INNER JOIN tratamientos t ON p.id_paciente = t.id_paciente ORDER BY p.nombre_paciente

2.-
SELECT p.nombre_paciente
FROM pacientes p
INNER JOIN tratamientos t
ON p.id_paciente = t.id_paciente
WHERE t.fecha_tratamiento > '2022-01-01' AND t.fecha_tratamiento <= '2022-12-31'

SELECT p.nombre_paciente
FROM pacientes p
INNER JOIN tratamientos t
ON p.id_paciente = t.id_paciente
WHERE t.fecha_tratamiento BETWEEN '2022-01-01' AND '2022-12-31' AND p.id_paciente = 4

SELECT p.nombre_paciente, COUNT(t.id_tratamiento) AS cant_tratamientos
FROM pacientes p
INNER JOIN tratamientos t
ON p.id_paciente = t.id_paciente
WHERE t.fecha_tratamiento BETWEEN '2022-01-01' AND '2022-12-31' AND p.id_paciente = 4

3.-
SELECT p.nombre_paciente, COUNT(t.id_tratamiento) AS cant_tratamientos
FROM pacientes p
INNER JOIN tratamientos t
ON p.id_paciente = t.id_paciente
GROUP BY p.id_paciente
ORDER BY cant_tratamientos DESC
LIMIT 1


Ejercicio: Torneo de Tenis

Un club de deportes necesita de una base de datos para gestionar el torneo de tenis que realizará.
Para esto, el encargado del club manifiesta que necesitaría almacenar los datos de los jugadores/participantes, las diferentes categorías (con sus respectivos rangos de edad y sexo) y las inscripciones de cada uno de los participantes en donde se debe especificar si el mismo abonó o no la inscripción). Sugiere como estructura de las tablas lo siguiente:

Modelado

- Participantes: dni_participante, apellido, nombre, direccion, edad, telefono, sexo
- Categorias: id_categoria, nombre, edad_min, edad_max, sexo
- Inscripciones: num_inscripcion, fecha_insc, abono_inscrip
- Agregar regios a las tablas para poder realizar consultas.

El encargado manifestó que las categorías presentes en el torneo serán:

- Damas A (18 a 34 años)
- Damas B (35 a 45 años)
- Damas C (46 a 100 años)
- Caballeros A (18 a 34 años)
- Caballeros B (35 a 50 años)
- Caballeros C (51 a 100 años)
- Juveniles Varones (13 a 17 años)
- Juveniles Mujeres (13 a 17 años)

- Se solicita crear una nueva base de datos llamada "torneo_tenis". Determinar al mismo tiempo las relaciones correspondientes.
- Asignar las correspondientes primary keys, foreign keys y tipos de datos.

Consultas SQL:

- Contar la cantidad total de participantes.
- Obtener la lista completa de todos los participantes.
- Obtener la lista completa de todas las categorias.
- Obtener la cantidad de participantes mujeres (sin imporar categoria)
- Obtener el nombre y apellido de los inscriptos en la categoria "Caballeros B"
- Obtener los datos de los participantes (de cualquier genero) que tengan una edad entre 25 y 37 años.
- Obtener la lista completa de inscripciones, especificando nombre y apellido de cada uno de los inscriptos, sin diferenciar categoria.


categorias
id_categoria
nombre
edad_min
edad_max
sexo
1

N
inscripciones
num_inscripcion
fecha_insc
abono_insc
fk_id_categoria
fk_id_participante
1

1
participantes
id_participante
dni_participante
apellido
nombre
direccion
edad
telefono
sexo

Desarrollo
SELECT COUNT(*) FROM participantes
SELECT * FROM participantes
SELECT * FROM categorias
SELECT COUNT(*) FROM participantes WHERE sexo = 'Femenino'
----------------------------
SELECT p.nombre, p.apellido
FROM participantes p, inscripciones i
WHERE p.id_participante = i.fk_id_participante AND i.fk_id_categoria = 5

SELECT nombre, apellido
FROM participantes
INNER JOIN inscripciones
ON participantes.id_participante = inscripciones.fk_id_participante
WHERE inscripciones.fk_id_categoria = 5
-------------------------
SELECT *
FROM participantes
WHERE edad BETWEEN 25 AND 37
--------------------
SELECT p.nombre, p.apellido, i.num_inscripcion, i.fecha_insc, i.abono_insc
FROM participantes p, inscripciones i
WHERE p.id_participante = i.fk_id_participante

SELECT p.nombre, p.apellido, i.num_inscripcion, i.fecha_insc, i.abono_insc
FROM participantes p
INNER JOIN inscripciones i
ON p.id_participante = i.fk_id_participante